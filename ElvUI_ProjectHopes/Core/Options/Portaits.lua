local Name, Private = ...
local E, L, V, P, G = unpack(ElvUI)

local ACH = E.Libs.ACH

function ProjectHopes:Portaits()
	local PORTRAIT = E:GetModule('Portrait', 'AceHook-3.0', 'AceEvent-3.0', 'AceTimer-3.0')

  local POA = ProjectHopes.Options.args

	POA.Portaits = ACH:Group(E:TextGradient(L["Portraits"], 0.6, 0.6, 0.6, 0.34, 1, 0.67), nil, 3, 'tab')
	local POAPOR = POA.Portaits.args
	POAPOR.player = ACH:Group(L["Player"], nil, 1, 'tab', nil, nil, nil, function() return not E.db.unitframe.units.player.enable end)
	POAPOR.player.args.playerpor = ACH:Toggle(L["Enable"], nil, 1, nil, false, "full", function() return E.db.ProjectHopes.portraits.playerpor end, function(_, value) E.db.ProjectHopes.portraits.playerpor = value E:StaticPopup_Show('ProjectHopes_RL') end, function() return not E.db.unitframe.units.player.enable end)
	POAPOR.player.args.Options = ACH:Group(L["Misc"], nil, 2, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.playerpor end)
	POAPOR.player.args.Options.inline = true
	POAPOR.player.args.Options.args.playerBorderColor = ACH:Toggle(L["Border Color"], nil, 2, nil, false, "full", function() return E.db.ProjectHopes.portraits.playerBorderColor end, function(_, value) E.db.ProjectHopes.portraits.playerBorderColor = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.player.args.Options.args.playerMirror = ACH:Toggle(L["Mirror Portrait"], nil, 3, nil, false, "full", function() return E.db.ProjectHopes.portraits.playerMirror end, function(_, value) E.db.ProjectHopes.portraits.playerMirror = value PORTRAIT:UpdatePortrait("player", E.db.ProjectHopes.portraits.playerClassBackdropColor, E.db.ProjectHopes.portraits.playerClass, value, E.db.ProjectHopes.portraits.playerClassTexture) end)
	POAPOR.player.args.Options.args.playerClass = ACH:Toggle(L["Class Portrait"], nil, 4, nil, false, "full", function() return E.db.ProjectHopes.portraits.playerClass end, function(_, value) E.db.ProjectHopes.portraits.playerClass = value PORTRAIT:UpdatePortrait("player", E.db.ProjectHopes.portraits.playerClassBackdropColor, value, E.db.ProjectHopes.portraits.playerMirror, E.db.ProjectHopes.portraits.playerClassTexture) end)
	POAPOR.player.args.Options.args.playerClassTexture = ACH:Select(L["Class Texture"], nil, 6, (function() local t={} for k,v in pairs(Private.Media.Class) do t[k]=v.name or k end return t end)(), nil, "medium", function() return E.db.ProjectHopes.portraits.playerClassTexture end, function(_, value) E.db.ProjectHopes.portraits.playerClassTexture = value PORTRAIT:UpdatePortrait("player", E.db.ProjectHopes.portraits.playerClassBackdropColor, E.db.ProjectHopes.portraits.playerClass, E.db.ProjectHopes.portraits.playerMirror, value) end, nil, function() return not E.db.ProjectHopes.portraits.playerClass end)
	POAPOR.player.args.Options.args.playerClassBackdropColor = ACH:Color(L["Backdrop Color"], L["Choose a color for the portrait background"], 7, true, nil, function() local c = E.db.ProjectHopes.portraits.playerClassBackdropColor or { r=1, g=1, b=1, a=1 } return c.r, c.g, c.b, c.a end, function(_, r, g, b, a) E.db.ProjectHopes.portraits.playerClassBackdropColor = { r=r, g=g, b=b, a=a } PORTRAIT:UpdatePortrait("player", E.db.ProjectHopes.portraits.playerClassBackdropColor, E.db.ProjectHopes.portraits.playerClass, E.db.ProjectHopes.portraits.playerMirror, E.db.ProjectHopes.portraits.playerClassTexture) end, nil, function() local style = E.db.ProjectHopes.portraits.playerClassTexture or "hd" local media = Private.Media.Class[style] return not(media and media.transparent) or not E.db.ProjectHopes.portraits.playerClass end)
	POAPOR.player.args.Position = ACH:Group(L["Position"], nil, 3, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.playerpor end)
	POAPOR.player.args.Position.inline = true
	POAPOR.player.args.Position.args.playerframelevel = ACH:Range(L["Framelevel"], nil, 5, { min = -100, max = 100, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.playerframelevel end, function(_, value) E.db.ProjectHopes.portraits.playerframelevel = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.player.args.Position.args.playerSize = ACH:Range(L["Size of Portrait:"], nil, 5, { min = 0, max = 200, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.playerSize end, function(_, value) E.db.ProjectHopes.portraits.playerSize = value PORTRAIT:UpdateSize("player", E.db.ProjectHopes.portraits.playerSize, E.db.ProjectHopes.portraits.playerClass) end)
	POAPOR.player.args.Position.args.playerPosition = ACH:Select(L["Position"], nil, 7, Private.Values.AllPoints, nil, "medium", function() return E.db.ProjectHopes.portraits.playerPosition or "center" end, function(_, value) E.db.ProjectHopes.portraits.playerPosition = value PORTRAIT:UpdatePortrait("player",E.db.ProjectHopes.portraits.playerClassBackdropColor,E.db.ProjectHopes.portraits.playerClass,E.db.ProjectHopes.portraits.playerMirror,E.db.ProjectHopes.portraits.playerClassTexture,E.db.ProjectHopes.portraits.playerBorderColor) PORTRAIT:UpdatePosition("player",value,E.db.ProjectHopes.portraits.playerOffsetX or 0,E.db.ProjectHopes.portraits.playerOffsetY or 0) end)
	POAPOR.player.args.Position.args.playerOffsetX = ACH:Range(L["X Offset (Left/Right)"], nil, 8, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.playerOffsetX or 0 end, function(_, value) E.db.ProjectHopes.portraits.playerOffsetX = value PORTRAIT:UpdatePosition("player",E.db.ProjectHopes.portraits.playerPosition, value,E.db.ProjectHopes.portraits.playerOffsetY or 0, E.db.ProjectHopes.portraits.playerStrata) end)
	POAPOR.player.args.Position.args.playerOffsetY = ACH:Range(L["Y Offset (Down/Up)"], nil, 9, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.playerOffsetY or 0 end, function(_, value) E.db.ProjectHopes.portraits.playerOffsetY = value PORTRAIT:UpdatePosition("player",E.db.ProjectHopes.portraits.playerPosition, E.db.ProjectHopes.portraits.playerOffsetX or 0,value, E.db.ProjectHopes.portraits.playerStrata) end)
	POAPOR.player.args.Position.args.playerStrata = ACH:Select(L["Frame Strata"], nil, 10, Private.Values.Strata, nil, nil, function() return E.db.ProjectHopes.portraits.playerStrata or "MEDIUM" end, function(_, value) E.db.ProjectHopes.portraits.playerStrata = value PORTRAIT:UpdatePosition("player", E.db.ProjectHopes.portraits.playerPosition,  E.db.ProjectHopes.portraits.playerOffsetX or 0, E.db.ProjectHopes.portraits.playerOffsetY or 0, value) end)

	POAPOR.target = ACH:Group(L["Target"], nil, 1, 'tab', nil, nil, nil, function() return not E.db.unitframe.units.target.enable end)
	POAPOR.target.args.targetpor = ACH:Toggle(L["Enable"], nil, 1, nil, false, "full", function() return E.db.ProjectHopes.portraits.targetpor end, function(_, value) E.db.ProjectHopes.portraits.targetpor = value E:StaticPopup_Show('ProjectHopes_RL') end, function() return not E.db.unitframe.units.target.enable end)
	POAPOR.target.args.Options = ACH:Group(L["Misc"], nil, 2, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.targetpor end)
	POAPOR.target.args.Options.inline = true
	POAPOR.target.args.Options.args.targetBorderColor = ACH:Toggle(L["Border Color"], nil, 2, nil, false, "full", function() return E.db.ProjectHopes.portraits.targetBorderColor end, function(_, value) E.db.ProjectHopes.portraits.targetBorderColor = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.target.args.Options.args.targetMirror = ACH:Toggle(L["Mirror Portrait"], nil, 3, nil, false, "full", function() return E.db.ProjectHopes.portraits.targetMirror end, function(_, value) E.db.ProjectHopes.portraits.targetMirror = value PORTRAIT:UpdatePortrait("target", E.db.ProjectHopes.portraits.targetClassBackdropColor, E.db.ProjectHopes.portraits.targetClass, value, E.db.ProjectHopes.portraits.targetClassTexture) end)
	POAPOR.target.args.Options.args.targetClass = ACH:Toggle(L["Class Portrait"], nil, 4, nil, false, "full", function() return E.db.ProjectHopes.portraits.targetClass end, function(_, value) E.db.ProjectHopes.portraits.targetClass = value PORTRAIT:UpdatePortrait("target", E.db.ProjectHopes.portraits.targetClassBackdropColor, value, E.db.ProjectHopes.portraits.targetMirror, E.db.ProjectHopes.portraits.targetClassTexture) end)
	POAPOR.target.args.Options.args.targetClassTexture = ACH:Select(L["Class Texture"], nil, 6, (function() local t={} for k,v in pairs(Private.Media.Class) do t[k]=v.name or k end return t end)(), nil, "medium", function() return E.db.ProjectHopes.portraits.targetClassTexture end, function(_, value) E.db.ProjectHopes.portraits.targetClassTexture = value PORTRAIT:UpdatePortrait("target", E.db.ProjectHopes.portraits.targetClassBackdropColor, E.db.ProjectHopes.portraits.targetClass, E.db.ProjectHopes.portraits.targetMirror, value) end, nil, function() return not E.db.ProjectHopes.portraits.targetClass end)
	POAPOR.target.args.Options.args.targetClassBackdropColor = ACH:Color(L["Backdrop Color"], L["Choose a color for the portrait background"], 7, true, nil, function() local c = E.db.ProjectHopes.portraits.targetClassBackdropColor or { r=1, g=1, b=1, a=1 } return c.r, c.g, c.b, c.a end, function(_, r, g, b, a) E.db.ProjectHopes.portraits.targetClassBackdropColor = { r=r, g=g, b=b, a=a } PORTRAIT:UpdatePortrait("target", E.db.ProjectHopes.portraits.targetClassBackdropColor, E.db.ProjectHopes.portraits.targetClass, E.db.ProjectHopes.portraits.targetMirror, E.db.ProjectHopes.portraits.targetClassTexture) end, nil, function() local style = E.db.ProjectHopes.portraits.targetClassTexture or "hd" local media = Private.Media.Class[style] return not(media and media.transparent) or not E.db.ProjectHopes.portraits.targetClass end)
	POAPOR.target.args.Position = ACH:Group(L["Position"], nil, 3, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.targetpor end)
	POAPOR.target.args.Position.inline = true
	POAPOR.target.args.Position.args.targetframelevel = ACH:Range(L["Framelevel"], nil, 5, { min = -100, max = 100, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.targetframelevel end, function(_, value) E.db.ProjectHopes.portraits.targetframelevel = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.target.args.Position.args.targetSize = ACH:Range(L["Size of Portrait:"], nil, 5, { min = 0, max = 200, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.targetSize end, function(_, value) E.db.ProjectHopes.portraits.targetSize = value PORTRAIT:UpdateSize("target", E.db.ProjectHopes.portraits.targetSize, E.db.ProjectHopes.portraits.targetClass) end)
	POAPOR.target.args.Position.args.targetPosition = ACH:Select(L["Position"], nil, 7, Private.Values.AllPoints, nil, "medium", function() return E.db.ProjectHopes.portraits.targetPosition or "CENTER" end, function(_, value) E.db.ProjectHopes.portraits.targetPosition = value PORTRAIT:UpdatePortrait("target",E.db.ProjectHopes.portraits.targetClassBackdropColor,E.db.ProjectHopes.portraits.targetClass,E.db.ProjectHopes.portraits.targetMirror,E.db.ProjectHopes.portraits.targetClassTexture,E.db.ProjectHopes.portraits.targetBorderColor) PORTRAIT:UpdatePosition("target",value,E.db.ProjectHopes.portraits.targetOffsetX or 0,E.db.ProjectHopes.portraits.targetOffsetY or 0) end)
	POAPOR.target.args.Position.args.targetOffsetX = ACH:Range(L["X Offset (Left/Right)"], nil, 8, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.targetOffsetX or 0 end, function(_, value) E.db.ProjectHopes.portraits.targetOffsetX = value PORTRAIT:UpdatePosition("target",E.db.ProjectHopes.portraits.targetPosition, value,E.db.ProjectHopes.portraits.targetOffsetY or 0, E.db.ProjectHopes.portraits.targetStrata) end)
	POAPOR.target.args.Position.args.targetOffsetY = ACH:Range(L["Y Offset (Down/Up)"], nil, 9, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.targetOffsetY or 0 end, function(_, value) E.db.ProjectHopes.portraits.targetOffsetY = value PORTRAIT:UpdatePosition("target",E.db.ProjectHopes.portraits.targetPosition, E.db.ProjectHopes.portraits.targetOffsetX or 0,value, E.db.ProjectHopes.portraits.targetStrata) end)
	POAPOR.target.args.Position.args.targetStrata = ACH:Select(L["Frame Strata"], nil, 10, Private.Values.Strata, nil, nil, function() return E.db.ProjectHopes.portraits.targetStrata or "MEDIUM" end, function(_, value) E.db.ProjectHopes.portraits.targetStrata = value PORTRAIT:UpdatePosition("target", E.db.ProjectHopes.portraits.targetPosition,  E.db.ProjectHopes.portraits.targetOffsetX or 0, E.db.ProjectHopes.portraits.targetOffsetY or 0, value) end)

	POAPOR.focus = ACH:Group(L["Focus"], nil, 1, 'tab', nil, nil, nil, function() return not E.db.unitframe.units.focus.enable end)
	POAPOR.focus.args.focuspor = ACH:Toggle(L["Enable"], nil, 1, nil, false, "full", function() return E.db.ProjectHopes.portraits.focuspor end, function(_, value) E.db.ProjectHopes.portraits.focuspor = value E:StaticPopup_Show('ProjectHopes_RL') end, function() return not E.db.unitframe.units.focus.enable end)
	POAPOR.focus.args.Options = ACH:Group(L["Misc"], nil, 2, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.focuspor end)
	POAPOR.focus.args.Options.inline = true
	POAPOR.focus.args.Options.args.focusBorderColor = ACH:Toggle(L["Border Color"], nil, 2, nil, false, "full", function() return E.db.ProjectHopes.portraits.focusBorderColor end, function(_, value) E.db.ProjectHopes.portraits.focusBorderColor = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.focus.args.Options.args.focusMirror = ACH:Toggle(L["Mirror Portrait"], nil, 3, nil, false, "full", function() return E.db.ProjectHopes.portraits.focusMirror end, function(_, value) E.db.ProjectHopes.portraits.focusMirror = value PORTRAIT:UpdatePortrait("focus", E.db.ProjectHopes.portraits.focusClassBackdropColor, E.db.ProjectHopes.portraits.focusClass, value, E.db.ProjectHopes.portraits.focusClassTexture) end)
	POAPOR.focus.args.Options.args.focusClass = ACH:Toggle(L["Class Portrait"], nil, 4, nil, false, "full", function() return E.db.ProjectHopes.portraits.focusClass end, function(_, value) E.db.ProjectHopes.portraits.focusClass = value PORTRAIT:UpdatePortrait("focus", E.db.ProjectHopes.portraits.focusClassBackdropColor, value, E.db.ProjectHopes.portraits.focusMirror, E.db.ProjectHopes.portraits.focusClassTexture) end)
	POAPOR.focus.args.Options.args.focusClassTexture = ACH:Select(L["Class Texture"], nil, 6, (function() local t={} for k,v in pairs(Private.Media.Class) do t[k]=v.name or k end return t end)(), nil, "medium", function() return E.db.ProjectHopes.portraits.focusClassTexture end, function(_, value) E.db.ProjectHopes.portraits.focusClassTexture = value PORTRAIT:UpdatePortrait("focus", E.db.ProjectHopes.portraits.focusClassBackdropColor, E.db.ProjectHopes.portraits.focusClass, E.db.ProjectHopes.portraits.focusMirror, value) end, nil, function() return not E.db.ProjectHopes.portraits.focusClass end)
	POAPOR.focus.args.Options.args.focusClassBackdropColor = ACH:Color(L["Backdrop Color"], L["Choose a color for the portrait background"], 7, true, nil, function() local c = E.db.ProjectHopes.portraits.focusClassBackdropColor or { r=1, g=1, b=1, a=1 } return c.r, c.g, c.b, c.a end, function(_, r, g, b, a) E.db.ProjectHopes.portraits.focusClassBackdropColor = { r=r, g=g, b=b, a=a } PORTRAIT:UpdatePortrait("focus", E.db.ProjectHopes.portraits.focusClassBackdropColor, E.db.ProjectHopes.portraits.focusClass, E.db.ProjectHopes.portraits.focusMirror, E.db.ProjectHopes.portraits.focusClassTexture) end, nil, function() local style = E.db.ProjectHopes.portraits.focusClassTexture or "hd" local media = Private.Media.Class[style] return not(media and media.transparent) or not E.db.ProjectHopes.portraits.focusClass end)
	POAPOR.focus.args.Position = ACH:Group(L["Position"], nil, 3, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.focuspor end)
	POAPOR.focus.args.Position.inline = true
	POAPOR.focus.args.Position.args.focusframelevel = ACH:Range(L["Framelevel"], nil, 5, { min = -100, max = 100, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.focusframelevel end, function(_, value) E.db.ProjectHopes.portraits.focusframelevel = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.focus.args.Position.args.focusSize = ACH:Range(L["Size of Portrait:"], nil, 5, { min = 0, max = 200, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.focusSize end, function(_, value) E.db.ProjectHopes.portraits.focusSize = value PORTRAIT:UpdateSize("focus", E.db.ProjectHopes.portraits.focusSize, E.db.ProjectHopes.portraits.focusClass) end)
	POAPOR.focus.args.Position.args.focusPosition = ACH:Select(L["Position"], nil, 7, Private.Values.AllPoints, nil, "medium", function() return E.db.ProjectHopes.portraits.focusPosition or "center" end, function(_, value) E.db.ProjectHopes.portraits.focusPosition = value PORTRAIT:UpdatePortrait("focus",E.db.ProjectHopes.portraits.focusClassBackdropColor,E.db.ProjectHopes.portraits.focusClass,E.db.ProjectHopes.portraits.focusMirror,E.db.ProjectHopes.portraits.focusClassTexture,E.db.ProjectHopes.portraits.focusBorderColor) PORTRAIT:UpdatePosition("focus",value,E.db.ProjectHopes.portraits.focusOffsetX or 0,E.db.ProjectHopes.portraits.focusOffsetY or 0) end)
	POAPOR.focus.args.Position.args.focusOffsetX = ACH:Range(L["X Offset (Left/Right)"], nil, 8, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.focusOffsetX or 0 end, function(_, value) E.db.ProjectHopes.portraits.focusOffsetX = value PORTRAIT:UpdatePosition("focus",E.db.ProjectHopes.portraits.focusPosition, value,E.db.ProjectHopes.portraits.focusOffsetY or 0, E.db.ProjectHopes.portraits.focusStrata) end)
	POAPOR.focus.args.Position.args.focusOffsetY = ACH:Range(L["Y Offset (Down/Up)"], nil, 9, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.focusOffsetY or 0 end, function(_, value) E.db.ProjectHopes.portraits.focusOffsetY = value PORTRAIT:UpdatePosition("focus",E.db.ProjectHopes.portraits.focusPosition, E.db.ProjectHopes.portraits.focusOffsetX or 0,value, E.db.ProjectHopes.portraits.focusStrata) end)
	POAPOR.focus.args.Position.args.focusStrata = ACH:Select(L["Frame Strata"], nil, 10, Private.Values.Strata, nil, nil, function() return E.db.ProjectHopes.portraits.focusStrata or "MEDIUM" end, function(_, value) E.db.ProjectHopes.portraits.focusStrata = value PORTRAIT:UpdatePosition("focus", E.db.ProjectHopes.portraits.focusPosition,  E.db.ProjectHopes.portraits.focusOffsetX or 0, E.db.ProjectHopes.portraits.focusOffsetY or 0, value) end)

	POAPOR.targettarget = ACH:Group(L["Targettarget"], nil, 1, 'tab', nil, nil, nil, function() return not E.db.unitframe.units.targettarget.enable end)
	POAPOR.targettarget.args.targettargetpor = ACH:Toggle(L["Enable"], nil, 1, nil, false, "full", function() return E.db.ProjectHopes.portraits.targettargetpor end, function(_, value) E.db.ProjectHopes.portraits.targettargetpor = value E:StaticPopup_Show('ProjectHopes_RL') end, function() return not E.db.unitframe.units.targettarget.enable end)
	POAPOR.targettarget.args.Options = ACH:Group(L["Misc"], nil, 2, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.targettargetpor end)
	POAPOR.targettarget.args.Options.inline = true
	POAPOR.targettarget.args.Options.args.targettargetBorderColor = ACH:Toggle(L["Border Color"], nil, 2, nil, false, "full", function() return E.db.ProjectHopes.portraits.targettargetBorderColor end, function(_, value) E.db.ProjectHopes.portraits.targettargetBorderColor = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.targettarget.args.Options.args.targettargetMirror = ACH:Toggle(L["Mirror Portrait"], nil, 3, nil, false, "full", function() return E.db.ProjectHopes.portraits.targettargetMirror end, function(_, value) E.db.ProjectHopes.portraits.targettargetMirror = value PORTRAIT:UpdatePortrait("targettarget", E.db.ProjectHopes.portraits.targettargetClassBackdropColor, E.db.ProjectHopes.portraits.targettargetClass, value, E.db.ProjectHopes.portraits.targettargetClassTexture) end)
	POAPOR.targettarget.args.Options.args.targettargetClass = ACH:Toggle(L["Class Portrait"], nil, 4, nil, false, "full", function() return E.db.ProjectHopes.portraits.targettargetClass end, function(_, value) E.db.ProjectHopes.portraits.targettargetClass = value PORTRAIT:UpdatePortrait("targettarget", E.db.ProjectHopes.portraits.targettargetClassBackdropColor, value, E.db.ProjectHopes.portraits.targettargetMirror, E.db.ProjectHopes.portraits.targettargetClassTexture) end)
	POAPOR.targettarget.args.Options.args.targettargetClassTexture = ACH:Select(L["Class Texture"], nil, 6, (function() local t={} for k,v in pairs(Private.Media.Class) do t[k]=v.name or k end return t end)(), nil, "medium", function() return E.db.ProjectHopes.portraits.targettargetClassTexture end, function(_, value) E.db.ProjectHopes.portraits.targettargetClassTexture = value PORTRAIT:UpdatePortrait("targettarget", E.db.ProjectHopes.portraits.targettargetClassBackdropColor, E.db.ProjectHopes.portraits.targettargetClass, E.db.ProjectHopes.portraits.targettargetMirror, value) end, nil, function() return not E.db.ProjectHopes.portraits.targettargetClass end)
	POAPOR.targettarget.args.Options.args.targettargetClassBackdropColor = ACH:Color(L["Backdrop Color"], L["Choose a color for the portrait background"], 7, true, nil, function() local c = E.db.ProjectHopes.portraits.targettargetClassBackdropColor or { r=1, g=1, b=1, a=1 } return c.r, c.g, c.b, c.a end, function(_, r, g, b, a) E.db.ProjectHopes.portraits.targettargetClassBackdropColor = { r=r, g=g, b=b, a=a } PORTRAIT:UpdatePortrait("targettarget", E.db.ProjectHopes.portraits.targettargetClassBackdropColor, E.db.ProjectHopes.portraits.targettargetClass, E.db.ProjectHopes.portraits.targettargetMirror, E.db.ProjectHopes.portraits.targettargetClassTexture) end, nil, function() local style = E.db.ProjectHopes.portraits.targettargetClassTexture or "hd" local media = Private.Media.Class[style] return not(media and media.transparent) or not E.db.ProjectHopes.portraits.targettargetClass end)
	POAPOR.targettarget.args.Position = ACH:Group(L["Position"], nil, 3, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.targettargetpor end)
	POAPOR.targettarget.args.Position.inline = true
	POAPOR.targettarget.args.Position.args.targettargetframelevel = ACH:Range(L["Framelevel"], nil, 5, { min = -100, max = 100, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.targettargetframelevel end, function(_, value) E.db.ProjectHopes.portraits.targettargetframelevel = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.targettarget.args.Position.args.targettargetSize = ACH:Range(L["Size of Portrait:"], nil, 5, { min = 0, max = 200, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.targettargetSize end, function(_, value) E.db.ProjectHopes.portraits.targettargetSize = value PORTRAIT:UpdateSize("targettarget", E.db.ProjectHopes.portraits.targettargetSize, E.db.ProjectHopes.portraits.targettargetClass) end)
	POAPOR.targettarget.args.Position.args.targettargetPosition = ACH:Select(L["Position"], nil, 7, Private.Values.AllPoints, nil, "medium", function() return E.db.ProjectHopes.portraits.targettargetPosition or "center" end, function(_, value) E.db.ProjectHopes.portraits.targettargetPosition = value PORTRAIT:UpdatePortrait("targettarget",E.db.ProjectHopes.portraits.targettargetClassBackdropColor,E.db.ProjectHopes.portraits.targettargetClass,E.db.ProjectHopes.portraits.targettargetMirror,E.db.ProjectHopes.portraits.targettargetClassTexture,E.db.ProjectHopes.portraits.targettargetBorderColor) PORTRAIT:UpdatePosition("targettarget",value,E.db.ProjectHopes.portraits.targettargetOffsetX or 0,E.db.ProjectHopes.portraits.targettargetOffsetY or 0) end)
	POAPOR.targettarget.args.Position.args.targettargetOffsetX = ACH:Range(L["X Offset (Left/Right)"], nil, 8, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.targettargetOffsetX or 0 end, function(_, value) E.db.ProjectHopes.portraits.targettargetOffsetX = value PORTRAIT:UpdatePosition("targettarget",E.db.ProjectHopes.portraits.targettargetPosition, value,E.db.ProjectHopes.portraits.targettargetOffsetY or 0, E.db.ProjectHopes.portraits.targettargetStrata) end)
	POAPOR.targettarget.args.Position.args.targettargetOffsetY = ACH:Range(L["Y Offset (Down/Up)"], nil, 9, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.targettargetOffsetY or 0 end, function(_, value) E.db.ProjectHopes.portraits.targettargetOffsetY = value PORTRAIT:UpdatePosition("targettarget",E.db.ProjectHopes.portraits.targettargetPosition, E.db.ProjectHopes.portraits.targettargetOffsetX or 0,value, E.db.ProjectHopes.portraits.targettargetStrata) end)
	POAPOR.targettarget.args.Position.args.targettargetStrata = ACH:Select(L["Frame Strata"], nil, 10, Private.Values.Strata, nil, nil, function() return E.db.ProjectHopes.portraits.targettargetStrata or "MEDIUM" end, function(_, value) E.db.ProjectHopes.portraits.targettargetStrata = value PORTRAIT:UpdatePosition("targettarget", E.db.ProjectHopes.portraits.targettargetPosition,  E.db.ProjectHopes.portraits.targettargetOffsetX or 0, E.db.ProjectHopes.portraits.targettargetOffsetY or 0, value) end)

	POAPOR.boss = ACH:Group(L["Boss"], nil, 1, 'tab', nil, nil, nil, function() return not E.db.unitframe.units.boss.enable end)
	POAPOR.boss.args.bosspor = ACH:Toggle(L["Enable"], nil, 1, nil, false, "full", function() return E.db.ProjectHopes.portraits.bosspor end, function(_, value) E.db.ProjectHopes.portraits.bosspor = value E:StaticPopup_Show('ProjectHopes_RL') end, function() return not E.db.unitframe.units.boss.enable end)
	POAPOR.boss.args.Options = ACH:Group(L["Misc"], nil, 2, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.bosspor end)
	POAPOR.boss.args.Options.inline = true
	POAPOR.boss.args.Options.args.bossBorderColor = ACH:Toggle(L["Border Color"], nil, 2, nil, false, "full", function() return E.db.ProjectHopes.portraits.bossBorderColor end, function(_, value) E.db.ProjectHopes.portraits.bossBorderColor = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.boss.args.Options.args.bossMirror = ACH:Toggle(L["Mirror Portrait"], nil, 3, nil, false, "full", function() return E.db.ProjectHopes.portraits.bossMirror end, function(_, value) E.db.ProjectHopes.portraits.bossMirror = value PORTRAIT:UpdatePortrait("boss", E.db.ProjectHopes.portraits.bossClassBackdropColor, E.db.ProjectHopes.portraits.bossClass, value, E.db.ProjectHopes.portraits.bossClassTexture) end)
	POAPOR.boss.args.Position = ACH:Group(L["Position"], nil, 3, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.bosspor end)
	POAPOR.boss.args.Position.inline = true
	POAPOR.boss.args.Position.args.bossframelevel = ACH:Range(L["Framelevel"], nil, 5, { min = -100, max = 100, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.bossframelevel end, function(_, value) E.db.ProjectHopes.portraits.bossframelevel = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.boss.args.Position.args.bossSize = ACH:Range(L["Size of Portrait:"], nil, 5, { min = 0, max = 200, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.bossSize end, function(_, value) E.db.ProjectHopes.portraits.bossSize = value PORTRAIT:UpdateSize("boss", E.db.ProjectHopes.portraits.bossSize, E.db.ProjectHopes.portraits.bossClass) end)
	POAPOR.boss.args.Position.args.bossPosition = ACH:Select(L["Position"], nil, 7, Private.Values.AllPoints, nil, "medium", function() return E.db.ProjectHopes.portraits.bossPosition or "center" end, function(_, value) E.db.ProjectHopes.portraits.bossPosition = value PORTRAIT:UpdatePortrait("boss",E.db.ProjectHopes.portraits.bossClassBackdropColor,E.db.ProjectHopes.portraits.bossClass,E.db.ProjectHopes.portraits.bossMirror,E.db.ProjectHopes.portraits.bossClassTexture,E.db.ProjectHopes.portraits.bossBorderColor) PORTRAIT:UpdatePosition("boss",value,E.db.ProjectHopes.portraits.bossOffsetX or 0,E.db.ProjectHopes.portraits.bossOffsetY or 0) end)
	POAPOR.boss.args.Position.args.bossOffsetX = ACH:Range(L["X Offset (Left/Right)"], nil, 8, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.bossOffsetX or 0 end, function(_, value) E.db.ProjectHopes.portraits.bossOffsetX = value PORTRAIT:UpdatePosition("boss",E.db.ProjectHopes.portraits.bossPosition, value,E.db.ProjectHopes.portraits.bossOffsetY or 0, E.db.ProjectHopes.portraits.bossStrata) end)
	POAPOR.boss.args.Position.args.bossOffsetY = ACH:Range(L["Y Offset (Down/Up)"], nil, 9, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.bossOffsetY or 0 end, function(_, value) E.db.ProjectHopes.portraits.bossOffsetY = value PORTRAIT:UpdatePosition("boss",E.db.ProjectHopes.portraits.bossPosition, E.db.ProjectHopes.portraits.bossOffsetX or 0,value, E.db.ProjectHopes.portraits.bossStrata) end)
	POAPOR.boss.args.Position.args.bossStrata = ACH:Select(L["Frame Strata"], nil, 10, Private.Values.Strata, nil, nil, function() return E.db.ProjectHopes.portraits.bossStrata or "MEDIUM" end, function(_, value) E.db.ProjectHopes.portraits.bossStrata = value PORTRAIT:UpdatePosition("boss", E.db.ProjectHopes.portraits.bossPosition,  E.db.ProjectHopes.portraits.bossOffsetX or 0, E.db.ProjectHopes.portraits.bossOffsetY or 0, value) end)

	POAPOR.pet = ACH:Group(L["Pet"], nil, 1, 'tab', nil, nil, nil, function() return not E.db.unitframe.units.pet.enable end)
	POAPOR.pet.args.petpor = ACH:Toggle(L["Enable"], nil, 1, nil, false, "full", function() return E.db.ProjectHopes.portraits.petpor end, function(_, value) E.db.ProjectHopes.portraits.petpor = value E:StaticPopup_Show('ProjectHopes_RL') end, function() return not E.db.unitframe.units.pet.enable end)
	POAPOR.pet.args.Options = ACH:Group(L["Misc"], nil, 2, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.petpor end)
	POAPOR.pet.args.Options.inline = true
	POAPOR.pet.args.Options.args.petBorderColor = ACH:Toggle(L["Border Color"], nil, 2, nil, false, "full", function() return E.db.ProjectHopes.portraits.petBorderColor end, function(_, value) E.db.ProjectHopes.portraits.petBorderColor = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.pet.args.Options.args.petMirror = ACH:Toggle(L["Mirror Portrait"], nil, 3, nil, false, "full", function() return E.db.ProjectHopes.portraits.petMirror end, function(_, value) E.db.ProjectHopes.portraits.petMirror = value PORTRAIT:UpdatePortrait("pet", E.db.ProjectHopes.portraits.petClassBackdropColor, E.db.ProjectHopes.portraits.petClass, value, E.db.ProjectHopes.portraits.petClassTexture) end)
	POAPOR.pet.args.Options.args.petClassTexture = ACH:Select(L["Class Texture"], nil, 6, (function() local t={} for k,v in pairs(Private.Media.Class) do t[k]=v.name or k end return t end)(), nil, "medium", function() return E.db.ProjectHopes.portraits.petClassTexture end, function(_, value) E.db.ProjectHopes.portraits.petClassTexture = value PORTRAIT:UpdatePortrait("pet", E.db.ProjectHopes.portraits.petClassBackdropColor, E.db.ProjectHopes.portraits.petClass, E.db.ProjectHopes.portraits.petMirror, value) end, nil, function() return not E.db.ProjectHopes.portraits.petClass end)
	POAPOR.pet.args.Options.args.petClassBackdropColor = ACH:Color(L["Backdrop Color"], L["Choose a color for the portrait background"], 7, true, nil, function() local c = E.db.ProjectHopes.portraits.petClassBackdropColor or { r=1, g=1, b=1, a=1 } return c.r, c.g, c.b, c.a end, function(_, r, g, b, a) E.db.ProjectHopes.portraits.petClassBackdropColor = { r=r, g=g, b=b, a=a } PORTRAIT:UpdatePortrait("pet", E.db.ProjectHopes.portraits.petClassBackdropColor, E.db.ProjectHopes.portraits.petClass, E.db.ProjectHopes.portraits.petMirror, E.db.ProjectHopes.portraits.petClassTexture) end, nil, function() local style = E.db.ProjectHopes.portraits.petClassTexture or "hd" local media = Private.Media.Class[style] return not(media and media.transparent) or not E.db.ProjectHopes.portraits.petClass end)
	POAPOR.pet.args.Position = ACH:Group(L["Position"], nil, 3, nil, nil, nil, nil, function() return not E.db.ProjectHopes.portraits.petpor end)
	POAPOR.pet.args.Position.inline = true
	POAPOR.pet.args.Position.args.petframelevel = ACH:Range(L["Framelevel"], nil, 5, { min = -100, max = 100, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.petframelevel end, function(_, value) E.db.ProjectHopes.portraits.petframelevel = value E:StaticPopup_Show('ProjectHopes_RL') end)
	POAPOR.pet.args.Position.args.petSize = ACH:Range(L["Size of Portrait:"], nil, 5, { min = 0, max = 200, step = 1 }, "medium", function() return E.db.ProjectHopes.portraits.petSize end, function(_, value) E.db.ProjectHopes.portraits.petSize = value PORTRAIT:UpdateSize("pet", E.db.ProjectHopes.portraits.petSize, E.db.ProjectHopes.portraits.petClass) end)
	POAPOR.pet.args.Position.args.petPosition = ACH:Select(L["Position"], nil, 7, Private.Values.AllPoints, nil, "medium", function() return E.db.ProjectHopes.portraits.petPosition or "center" end, function(_, value) E.db.ProjectHopes.portraits.petPosition = value PORTRAIT:UpdatePortrait("pet",E.db.ProjectHopes.portraits.petClassBackdropColor,E.db.ProjectHopes.portraits.petClass,E.db.ProjectHopes.portraits.petMirror,E.db.ProjectHopes.portraits.petClassTexture,E.db.ProjectHopes.portraits.petBorderColor) PORTRAIT:UpdatePosition("pet",value,E.db.ProjectHopes.portraits.petOffsetX or 0,E.db.ProjectHopes.portraits.petOffsetY or 0) end)
	POAPOR.pet.args.Position.args.petOffsetX = ACH:Range(L["X Offset (Left/Right)"], nil, 8, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.petOffsetX or 0 end, function(_, value) E.db.ProjectHopes.portraits.petOffsetX = value PORTRAIT:UpdatePosition("pet",E.db.ProjectHopes.portraits.petPosition, value,E.db.ProjectHopes.portraits.petOffsetY or 0, E.db.ProjectHopes.portraits.petStrata) end)
	POAPOR.pet.args.Position.args.petOffsetY = ACH:Range(L["Y Offset (Down/Up)"], nil, 9, {min=-200,max=200,step=1}, nil, function() return E.db.ProjectHopes.portraits.petOffsetY or 0 end, function(_, value) E.db.ProjectHopes.portraits.petOffsetY = value PORTRAIT:UpdatePosition("pet",E.db.ProjectHopes.portraits.petPosition, E.db.ProjectHopes.portraits.petOffsetX or 0,value, E.db.ProjectHopes.portraits.petStrata) end)
	POAPOR.pet.args.Position.args.petStrata = ACH:Select(L["Frame Strata"], nil, 10, Private.Values.Strata, nil, nil, function() return E.db.ProjectHopes.portraits.petStrata or "MEDIUM" end, function(_, value) E.db.ProjectHopes.portraits.petStrata = value PORTRAIT:UpdatePosition("pet", E.db.ProjectHopes.portraits.petPosition,  E.db.ProjectHopes.portraits.petOffsetX or 0, E.db.ProjectHopes.portraits.petOffsetY or 0, value) end)
end

--[[
	ACH:Color(name, desc, order, alpha, width, get, set, disabled, hidden)
	ACH:Description(name, order, fontSize, image, imageCoords, imageWidth, imageHeight, width, hidden)
	ACH:Execute(name, desc, order, func, image, confirm, width, get, set, disabled, hidden)
	ACH:Group(name, desc, order, childGroups, get, set, disabled, hidden, func)
	ACH:Header(name, order, get, set, hidden)
	ACH:Input(name, desc, order, multiline, width, get, set, disabled, hidden, validate)
	ACH:Select(name, desc, order, values, confirm, width, get, set, disabled, hidden, sortByValue)
	ACH:MultiSelect(name, desc, order, values, confirm, width, get, set, disabled, hidden, sortByValue)
	ACH:Toggle(name, desc, order, tristate, confirm, width, get, set, disabled, hidden)
	ACH:Range(name, desc, order, values, width, get, set, disabled, hidden)
	ACH:Spacer(order, width, hidden)
	ACH:SharedMediaFont(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaSound(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaStatusbar(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaBackground(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaBorder(name, desc, order, width, get, set, disabled, hidden)
	ACH:FontFlags(name, desc, order, width, get, set, disabled, hidden)
]]
